// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux(a=false, b=instruction[0], sel=instruction[15], out=decInst0);
        Mux(a=false, b=instruction[1], sel=instruction[15], out=decInst1);
        Mux(a=false, b=instruction[2], sel=instruction[15], out=decInst2);
        Mux(a=false, b=instruction[3], sel=instruction[15], out=decInst3);
        Mux(a=false, b=instruction[4], sel=instruction[15], out=decInst4);
        Mux(a=false, b=instruction[5], sel=instruction[15], out=decInst5);
        Mux(a=false, b=instruction[6], sel=instruction[15], out=decInst6);
        Mux(a=false, b=instruction[7], sel=instruction[15], out=decInst7);
        Mux(a=false, b=instruction[8], sel=instruction[15], out=decInst8);
        Mux(a=false, b=instruction[9], sel=instruction[15], out=decInst9);
        Mux(a=false, b=instruction[10], sel=instruction[15], out=decInst10);
        Mux(a=false, b=instruction[11], sel=instruction[15], out=decInst11);
        Mux(a=false, b=instruction[12], sel=instruction[15], out=decInst12);
        Mux(a=false, b=instruction[13], sel=instruction[15], out=decInst13);

        And(a=decInst3, b=true, out=writeM); 
        Mux16(a=false , b=instruction , sel=instruction[15] , out=decInst);
        ALU(x=outD, y=outAM, zx=decInst11, nx=decInst10, zy=decInst9, ny=decInst8, f=decInst7, no=decInst6, out=aluOut, zr=zero, ng=neg);
        And16(a=aluOut, b=true, out=outM);
        PC(in=outA, load=jmp, inc=true, reset=reset, out[0..14]=pc);
        Not(in=instruction[15], out=notOpCode);
        Or(a=decInst5, b=notOpCode, out=regALoad);
        ARegister(in=muxA, load=regALoad, out=outA); // A register
        DRegister(in=aluOut, load=decInst4, out=outD); // D register
        Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxA); // before A
        Mux16(a=outA, b=inM, sel=decInst12, out=outAM); // A/M
        And16(a=outA, b=true, out[0..14]=addressM);

        And(a=neg, b=decInst2, out=jmpNE);
        And(a=zero, b=decInst1, out=jmpEQ);
        Not(in=neg, out=notNeg);
        Not(in=zero, out=notZero);
        And(a=notNeg, b=notZero, out=gZ);
        And(a=gZ, b=decInst0, out=jmpGZ);
        Or(a=jmpNE, b=jmpEQ, out=jmpLE);
        Or(a=jmpLE, b=jmpGZ, out=jmp);


}
